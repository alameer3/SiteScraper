"""
Website Cloner Pro - ุฃุฏุงุฉ ุงุณุชูุณุงุฎ ุงูููุงูุน ุงููุชูุฏูุฉ
===============================================

ุฃุฏุงุฉ ุดุงููุฉ ููุญุฏุฉ ูุงุณุชุฎุฑุงุฌ ููุณุฎ ุงูููุงูุน ุจุดูู ูุงูู
ุชุฏูุฌ ุฌููุน ุงููุธุงุฆู ูู ูุธุงู ูุงุญุฏ ูุชูุงูู

ุงููููุฒุงุช:
- ุงุณุชุฎุฑุงุฌ ุดุงูู ููู ูุญุชููุงุช ุงููููุน
- ูุณุฎ ุทุจู ุงูุฃุตู ููููุงูุน
- ุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู
- ุชูุงุฑูุฑ ููุตูุฉ ูุดุงููุฉ
- ุฏุนู ููููุงูุน ุงููุนูุฏุฉ ูุงูุชูุงุนููุฉ
- ุงุณุชุฎุฑุงุฌ ููุงุนุฏ ุงูุจูุงูุงุช ูุงูู APIs
- ุชุฌุงูุฒ ุงูุญูุงูุฉ ูุงููุญุชูู ุงููุฎูู
"""

import asyncio
import aiohttp
import aiofiles
import os
import json
import time
import logging
import hashlib
import re
import ssl
import csv
import shutil
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional, Set, Tuple, Union
from urllib.parse import urljoin, urlparse, parse_qs, unquote
from dataclasses import dataclass, asdict, field
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import queue

# Web scraping and parsing
from bs4 import BeautifulSoup, Tag
from bs4.element import NavigableString
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Advanced browser automation
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options as ChromeOptions
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.common.exceptions import TimeoutException, WebDriverException
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False

try:
    from playwright.async_api import async_playwright
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False

try:
    import trafilatura
    TRAFILATURA_AVAILABLE = True
except ImportError:
    TRAFILATURA_AVAILABLE = False

# Content analysis
try:
    import builtwith
    BUILTWITH_AVAILABLE = True
except ImportError:
    BUILTWITH_AVAILABLE = False

# Document generation
try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

try:
    from docx import Document
    from docx.shared import Inches
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

@dataclass
class CloningConfig:
    """ุฅุนุฏุงุฏุงุช ุดุงููุฉ ูุนูููุฉ ุงูุงุณุชูุณุงุฎ"""
    
    # Basic settings
    target_url: str = ""
    output_directory: str = "cloned_websites"
    max_depth: int = 5
    max_pages: int = 1000
    timeout: int = 30
    delay_between_requests: float = 1.0
    
    # Content extraction
    extract_all_content: bool = True
    extract_hidden_content: bool = True
    extract_dynamic_content: bool = True
    extract_media_files: bool = True
    extract_documents: bool = True
    extract_apis: bool = True
    extract_database_structure: bool = True
    
    # Advanced features
    bypass_protection: bool = True
    handle_javascript: bool = True
    handle_ajax: bool = True
    detect_spa: bool = True
    extract_source_code: bool = True
    analyze_with_ai: bool = True
    
    # Security and stealth
    use_proxy: bool = False
    proxy_list: List[str] = field(default_factory=list)
    rotate_user_agents: bool = True
    respect_robots_txt: bool = False
    handle_captcha: bool = True
    
    # Output formats
    create_identical_copy: bool = True
    generate_reports: bool = True
    export_formats: List[str] = field(default_factory=lambda: ['html', 'json', 'csv', 'pdf', 'docx'])
    detailed_logging: bool = True
    
    # Performance
    parallel_downloads: int = 10
    use_caching: bool = True
    optimize_images: bool = False
    compress_output: bool = False

@dataclass 
class CloningResult:
    """ูุชุงุฆุฌ ุนูููุฉ ุงูุงุณุชูุณุงุฎ"""
    
    success: bool = False
    start_time: datetime = field(default_factory=datetime.now)
    end_time: Optional[datetime] = None
    duration: float = 0.0
    
    # Statistics
    pages_extracted: int = 0
    assets_downloaded: int = 0
    errors_encountered: int = 0
    total_size: int = 0
    
    # Paths and files
    output_path: str = ""
    cloned_site_path: str = ""
    reports_path: str = ""
    
    # Analysis results
    technologies_detected: Dict[str, Any] = field(default_factory=dict)
    ai_analysis: Dict[str, Any] = field(default_factory=dict)
    security_analysis: Dict[str, Any] = field(default_factory=dict)
    performance_metrics: Dict[str, Any] = field(default_factory=dict)
    
    # Detailed results
    extracted_content: Dict[str, Any] = field(default_factory=dict)
    error_log: List[str] = field(default_factory=list)
    recommendations: List[str] = field(default_factory=list)

class WebsiteClonerPro:
    """ุฃุฏุงุฉ ุงุณุชูุณุงุฎ ุงูููุงูุน ุงููุชูุฏูุฉ ุงูููุญุฏุฉ"""
    
    def __init__(self, config: Optional[CloningConfig] = None):
        self.config = config or CloningConfig()
        self.logger = self._setup_logging()
        self.session: Optional[aiohttp.ClientSession] = None
        self.selenium_driver: Optional[webdriver.Chrome] = None
        
        # Results storage
        self.result = CloningResult()
        self.extracted_urls: Set[str] = set()
        self.download_queue: queue.Queue = queue.Queue()
        self.error_count: int = 0
        
        # Analysis caches
        self.content_cache: Dict[str, str] = {}
        self.asset_cache: Dict[str, bytes] = {}
        self.analysis_cache: Dict[str, Any] = {}
        
        # User agent rotation
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0"
        ]
        self.current_user_agent_index = 0
        
    def _setup_logging(self) -> logging.Logger:
        """ุฅุนุฏุงุฏ ูุธุงู ุงูุชุณุฌูู"""
        logger = logging.getLogger('WebsiteClonerPro')
        logger.setLevel(logging.DEBUG if self.config.detailed_logging else logging.INFO)
        
        # ุฅูุดุงุก ูุนุงูุฌ ุงูููู
        os.makedirs('logs', exist_ok=True)
        file_handler = logging.FileHandler(f'logs/cloner_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log')
        file_handler.setLevel(logging.DEBUG)
        
        # ุฅูุดุงุก ูุนุงูุฌ ูุญุฏุฉ ุงูุชุญูู
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # ุชูุณูู ุงูุฑุณุงุฆู
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return logger
        
    async def clone_website_complete(self, target_url: str) -> CloningResult:
        """ุงููุธููุฉ ุงูุฑุฆูุณูุฉ ูุงุณุชูุณุงุฎ ุงููููุน ุจุดูู ูุงูู"""
        
        self.config.target_url = target_url
        self.result.start_time = datetime.now()
        
        self.logger.info(f"๐ ุจุฏุก ุนูููุฉ ุงูุงุณุชูุณุงุฎ ุงูุดุงูู ูููููุน: {target_url}")
        
        try:
            # ุงููุฑุญูุฉ 1: ุงูุชุญุถูุฑ ูุงูุชููุฆุฉ
            await self._phase_1_preparation()
            
            # ุงููุฑุญูุฉ 2: ุงูุงุณุชูุดุงู ูุงูุชุญููู ุงูุฃููู
            await self._phase_2_discovery()
            
            # ุงููุฑุญูุฉ 3: ุงูุงุณุชุฎุฑุงุฌ ุงูุดุงูู
            await self._phase_3_comprehensive_extraction()
            
            # ุงููุฑุญูุฉ 4: ุชุญููู ุงููุญุชูู ูุงูุชูููุงุช
            await self._phase_4_content_analysis()
            
            # ุงููุฑุญูุฉ 5: ุงูุงุณุชุฎุฑุงุฌ ุงููุชูุฏู ูุงูุฎูู
            await self._phase_5_advanced_extraction()
            
            # ุงููุฑุญูุฉ 6: ุงูุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู
            await self._phase_6_ai_analysis()
            
            # ุงููุฑุญูุฉ 7: ุฅูุดุงุก ุงููุณุฎุฉ ุงููุทุงุจูุฉ
            await self._phase_7_create_replica()
            
            # ุงููุฑุญูุฉ 8: ุถูุงู ุงูุฌูุฏุฉ ูุงูุงุฎุชุจุงุฑ
            await self._phase_8_quality_assurance()
            
            # ุงููุฑุญูุฉ 9: ุฅูุชุงุฌ ุงูุชูุงุฑูุฑ ุงูุดุงููุฉ
            await self._phase_9_comprehensive_reporting()
            
            # ุงููุฑุญูุฉ 10: ุงูุชูุธูู ุงูููุงุฆู ูุงูุชุณููู
            await self._phase_10_final_organization()
            
            self.result.success = True
            self.logger.info("โ ุชู ุงูุชูุงู ุนูููุฉ ุงูุงุณุชูุณุงุฎ ุจูุฌุงุญ")
            
        except Exception as e:
            self.result.success = False
            self.result.error_log.append(f"ุฎุทุฃ ุนุงู ูู ุนูููุฉ ุงูุงุณุชูุณุงุฎ: {str(e)}")
            self.logger.error(f"โ ูุดู ูู ุนูููุฉ ุงูุงุณุชูุณุงุฎ: {e}", exc_info=True)
            
        finally:
            # ุชูุธูู ุงูููุงุฑุฏ
            await self._cleanup_resources()
            
            # ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ุงูููุงุฆูุฉ
            self.result.end_time = datetime.now()
            self.result.duration = (self.result.end_time - self.result.start_time).total_seconds()
            
        return self.result
    
    async def _phase_1_preparation(self):
        """ุงููุฑุญูุฉ 1: ุงูุชุญุถูุฑ ูุงูุชููุฆุฉ"""
        self.logger.info("๐ ุงููุฑุญูุฉ 1: ุงูุชุญุถูุฑ ูุงูุชููุฆุฉ")
        
        # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงูุฃุณุงุณูุฉ
        self.result.output_path = os.path.join(
            self.config.output_directory,
            f"{urlparse(self.config.target_url).netloc}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        os.makedirs(self.result.output_path, exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "01_extracted_content"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "02_assets"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "03_source_code"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "04_analysis"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "05_cloned_site"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "06_reports"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "07_databases"), exist_ok=True)
        os.makedirs(os.path.join(self.result.output_path, "08_apis"), exist_ok=True)
        
        # ุฅุนุฏุงุฏ ุฌูุณุฉ HTTP
        connector = aiohttp.TCPConnector(
            limit=100,
            limit_per_host=20,
            ttl_dns_cache=300,
            use_dns_cache=True
        )
        
        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={'User-Agent': self._get_user_agent()}
        )
        
        # ุฅุนุฏุงุฏ ูุชุตูุญ Selenium ุฅุฐุง ูุงู ูุชููุฑุงู
        if SELENIUM_AVAILABLE and self.config.handle_javascript:
            await self._setup_selenium()
            
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุงูุชุญุถูุฑ")
        
    async def _phase_2_discovery(self):
        """ุงููุฑุญูุฉ 2: ุงูุงุณุชูุดุงู ูุงูุชุญููู ุงูุฃููู"""
        self.logger.info("๐ ุงููุฑุญูุฉ 2: ุงูุงุณุชูุดุงู ูุงูุชุญููู ุงูุฃููู")
        
        # ุงูุญุตูู ุนูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
        main_page_content = await self._fetch_page_content(self.config.target_url)
        if not main_page_content:
            raise Exception("ูุดู ูู ุงูุญุตูู ุนูู ุงููุญุชูู ุงูุฑุฆูุณู ูููููุน")
            
        # ุชุญููู ุฃููู ููุตูุญุฉ ุงูุฑุฆูุณูุฉ
        soup = BeautifulSoup(main_page_content, 'html.parser')
        
        # ุงูุชุดุงู ููุน ุงููููุน
        site_type = await self._detect_site_type(soup)
        self.result.extracted_content['site_type'] = site_type
        
        # ุงุณุชุฎุฑุงุฌ ุงูุฑูุงุจุท ุงูุฃุณุงุณูุฉ
        base_links = await self._extract_all_links(soup, self.config.target_url)
        self.result.extracted_content['discovered_links'] = len(base_links)
        
        # ุชุญููู robots.txt
        robots_content = await self._analyze_robots_txt()
        self.result.extracted_content['robots_analysis'] = robots_content
        
        # ุงูุชุดุงู ุฎุฑูุทุฉ ุงููููุน
        sitemap_urls = await self._discover_sitemaps()
        self.result.extracted_content['sitemap_urls'] = sitemap_urls
        
        # ุชุญููู ุฃููู ููุชูููุงุช
        initial_tech_analysis = await self._initial_technology_detection(soup)
        self.result.technologies_detected = initial_tech_analysis
        
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุงูุงุณุชูุดุงู")
        
    async def _phase_3_comprehensive_extraction(self):
        """ุงููุฑุญูุฉ 3: ุงูุงุณุชุฎุฑุงุฌ ุงูุดุงูู"""
        self.logger.info("๐ฅ ุงููุฑุญูุฉ 3: ุงูุงุณุชุฎุฑุงุฌ ุงูุดุงูู")
        
        # ุงุณุชุฎุฑุงุฌ ุฌููุน ุงูุตูุญุงุช
        await self._extract_all_pages()
        
        # ุชุญููู ุฌููุน ุงูุฃุตูู
        await self._download_all_assets()
        
        # ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงูุฏููุงูููู
        if self.config.extract_dynamic_content:
            await self._extract_dynamic_content()
            
        # ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงููุฎูู
        if self.config.extract_hidden_content:
            await self._extract_hidden_content()
            
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุงูุงุณุชุฎุฑุงุฌ ุงูุดุงูู")
        
    async def _phase_4_content_analysis(self):
        """ุงููุฑุญูุฉ 4: ุชุญููู ุงููุญุชูู ูุงูุชูููุงุช"""
        self.logger.info("๐ฌ ุงููุฑุญูุฉ 4: ุชุญููู ุงููุญุชูู ูุงูุชูููุงุช")
        
        # ุชุญููู ุดุงูู ููุชูููุงุช ุงููุณุชุฎุฏูุฉ
        comprehensive_tech = await self._comprehensive_technology_analysis()
        self.result.technologies_detected.update(comprehensive_tech)
        
        # ุชุญููู ุจููุฉ ุงููููุน
        structure_analysis = await self._analyze_site_structure()
        self.result.extracted_content['structure_analysis'] = structure_analysis
        
        # ุชุญููู ุงูุฃูุงู
        security_analysis = await self._comprehensive_security_analysis()
        self.result.security_analysis = security_analysis
        
        # ุชุญููู ุงูุฃุฏุงุก
        performance_analysis = await self._performance_analysis()
        self.result.performance_metrics = performance_analysis
        
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุชุญููู ุงููุญุชูู")
        
    async def _phase_5_advanced_extraction(self):
        """ุงููุฑุญูุฉ 5: ุงูุงุณุชุฎุฑุงุฌ ุงููุชูุฏู ูุงูุฎูู"""
        self.logger.info("๐ฏ ุงููุฑุญูุฉ 5: ุงูุงุณุชุฎุฑุงุฌ ุงููุชูุฏู")
        
        # ุงุณุชุฎุฑุงุฌ APIs ูุงูููุงุท ุงูููุงุฆูุฉ
        if self.config.extract_apis:
            api_endpoints = await self._extract_api_endpoints()
            self.result.extracted_content['api_endpoints'] = api_endpoints
            
        # ุชุญููู ููุงุนุฏ ุงูุจูุงูุงุช ุงููุญุชููุฉ
        if self.config.extract_database_structure:
            db_structure = await self._analyze_database_structure()
            self.result.extracted_content['database_structure'] = db_structure
            
        # ุงุณุชุฎุฑุงุฌ ุงูููุฏ ุงููุตุฏุฑู
        if self.config.extract_source_code:
            source_code = await self._extract_source_code()
            self.result.extracted_content['source_code_analysis'] = source_code
            
        # ุชุญููู ุงูุชูุงุนูุงุช ูุงููุธุงุฆู
        interactions = await self._analyze_interactions()
        self.result.extracted_content['interactions'] = interactions
        
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุงูุงุณุชุฎุฑุงุฌ ุงููุชูุฏู")
        
    async def _phase_6_ai_analysis(self):
        """ุงููุฑุญูุฉ 6: ุงูุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        if not self.config.analyze_with_ai:
            return
            
        self.logger.info("๐ค ุงููุฑุญูุฉ 6: ุงูุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู")
        
        # ุชุญููู ุงูุฃููุงุท
        pattern_analysis = await self._ai_pattern_analysis()
        self.result.ai_analysis['patterns'] = pattern_analysis
        
        # ุชุญููู ุงูุบุฑุถ ูุงููุญุชูู
        content_analysis = await self._ai_content_analysis()
        self.result.ai_analysis['content_analysis'] = content_analysis
        
        # ุชูุตูุงุช ุงูุชุญุณูู
        optimization_recommendations = await self._ai_optimization_analysis()
        self.result.ai_analysis['optimization'] = optimization_recommendations
        
        # ุชุญููู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู
        ux_analysis = await self._ai_ux_analysis()
        self.result.ai_analysis['ux_analysis'] = ux_analysis
        
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุงูุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู")
        
    async def _phase_7_create_replica(self):
        """ุงููุฑุญูุฉ 7: ุฅูุดุงุก ุงููุณุฎุฉ ุงููุทุงุจูุฉ"""
        self.logger.info("๐ ุงููุฑุญูุฉ 7: ุฅูุดุงุก ุงููุณุฎุฉ ุงููุทุงุจูุฉ")
        
        if self.config.create_identical_copy:
            # ุฅูุดุงุก ูููู ุงููููุน ุงููุทุงุจู
            replica_structure = await self._create_replica_structure()
            
            # ูุณุฎ ูุชุนุฏูู ุงููููุงุช
            await self._copy_and_modify_files()
            
            # ุฅูุดุงุก ูุธุงู ุงูุชูุฌูู
            await self._create_routing_system()
            
            # ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
            await self._setup_local_database()
            
            self.result.cloned_site_path = os.path.join(self.result.output_path, "05_cloned_site")
            
        self.logger.info("โ ุชู ุฅููุงู ุฅูุดุงุก ุงููุณุฎุฉ ุงููุทุงุจูุฉ")
        
    async def _phase_8_quality_assurance(self):
        """ุงููุฑุญูุฉ 8: ุถูุงู ุงูุฌูุฏุฉ ูุงูุงุฎุชุจุงุฑ"""
        self.logger.info("๐ ุงููุฑุญูุฉ 8: ุถูุงู ุงูุฌูุฏุฉ")
        
        # ุงุฎุชุจุงุฑ ุงูุฑูุงุจุท
        broken_links = await self._test_all_links()
        self.result.extracted_content['broken_links'] = broken_links
        
        # ุงุฎุชุจุงุฑ ุงูุฃุตูู
        missing_assets = await self._verify_assets()
        self.result.extracted_content['missing_assets'] = missing_assets
        
        # ููุงุฑูุฉ ุงูุฃุฏุงุก
        performance_comparison = await self._compare_performance()
        self.result.performance_metrics['comparison'] = performance_comparison
        
        # ุชูููู ุงูุฌูุฏุฉ ุงูุฅุฌูุงููุฉ
        quality_score = await self._calculate_quality_score()
        self.result.extracted_content['quality_score'] = quality_score
        
        self.logger.info("โ ุชู ุฅููุงู ูุฑุญูุฉ ุถูุงู ุงูุฌูุฏุฉ")
        
    async def _phase_9_comprehensive_reporting(self):
        """ุงููุฑุญูุฉ 9: ุฅูุชุงุฌ ุงูุชูุงุฑูุฑ ุงูุดุงููุฉ"""
        self.logger.info("๐ ุงููุฑุญูุฉ 9: ุฅูุชุงุฌ ุงูุชูุงุฑูุฑ")
        
        self.result.reports_path = os.path.join(self.result.output_path, "06_reports")
        
        # ุชูุฑูุฑ HTML ุชูุงุนูู
        if 'html' in self.config.export_formats:
            await self._generate_html_report()
            
        # ุชูุฑูุฑ JSON ุชูุตููู
        if 'json' in self.config.export_formats:
            await self._generate_json_report()
            
        # ุชูุฑูุฑ CSV ููุจูุงูุงุช
        if 'csv' in self.config.export_formats:
            await self._generate_csv_reports()
            
        # ุชูุฑูุฑ PDF
        if 'pdf' in self.config.export_formats and REPORTLAB_AVAILABLE:
            await self._generate_pdf_report()
            
        # ุชูุฑูุฑ Word
        if 'docx' in self.config.export_formats and DOCX_AVAILABLE:
            await self._generate_docx_report()
            
        self.logger.info("โ ุชู ุฅููุงู ุฅูุชุงุฌ ุงูุชูุงุฑูุฑ")
        
    async def _phase_10_final_organization(self):
        """ุงููุฑุญูุฉ 10: ุงูุชูุธูู ุงูููุงุฆู ูุงูุชุณููู"""
        self.logger.info("๐ ุงููุฑุญูุฉ 10: ุงูุชูุธูู ุงูููุงุฆู")
        
        # ุฅูุดุงุก ุฏููู ุงููุดุฑูุน
        await self._create_project_guide()
        
        # ุถุบุท ุงููููุงุช ุฅุฐุง ูุงู ูุทููุจุงู
        if self.config.compress_output:
            await self._compress_output()
            
        # ุฅูุดุงุก checksums ููุชุญูู ูู ุณูุงูุฉ ุงูุจูุงูุงุช
        await self._generate_checksums()
        
        # ุฅูุดุงุก ููู README ุดุงูู
        await self._create_readme_file()
        
        # ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ุงูููุงุฆูุฉ
        await self._calculate_final_statistics()
        
        self.logger.info("โ ุชู ุฅููุงู ุงูุชูุธูู ุงูููุงุฆู")

    # ==================== Helper Methods ====================
    
    def _get_user_agent(self) -> str:
        """ุงูุญุตูู ุนูู User Agent ูุชูุงูุจ"""
        if self.config.rotate_user_agents:
            ua = self.user_agents[self.current_user_agent_index]
            self.current_user_agent_index = (self.current_user_agent_index + 1) % len(self.user_agents)
            return ua
        return self.user_agents[0]
        
    async def _fetch_page_content(self, url: str, use_js: bool = False) -> Optional[str]:
        """ุฌูุจ ูุญุชูู ุงูุตูุญุฉ ูุน ุฏุนู JavaScript"""
        try:
            if use_js and self.selenium_driver:
                # ุงุณุชุฎุฏุงู Selenium ูููุญุชูู ุงูุฏููุงูููู
                self.selenium_driver.get(url)
                await asyncio.sleep(3)  # ุงูุชุธุงุฑ ุชุญููู ุงููุญุชูู
                return self.selenium_driver.page_source
            else:
                # ุงุณุชุฎุฏุงู aiohttp ูููุญุชูู ุงูุซุงุจุช
                async with self.session.get(url) as response:
                    if response.status == 200:
                        return await response.text()
                    else:
                        self.logger.warning(f"ูุดู ูู ุฌูุจ {url}: {response.status}")
                        return None
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุฌูุจ {url}: {e}")
            self.error_count += 1
            return None
            
    async def _setup_selenium(self):
        """ุฅุนุฏุงุฏ ูุชุตูุญ Selenium"""
        try:
            options = ChromeOptions()
            options.add_argument('--headless')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument(f'--user-agent={self._get_user_agent()}')
            
            self.selenium_driver = webdriver.Chrome(options=options)
            self.logger.info("ุชู ุฅุนุฏุงุฏ Selenium ุจูุฌุงุญ")
        except Exception as e:
            self.logger.warning(f"ูุดู ูู ุฅุนุฏุงุฏ Selenium: {e}")
            self.selenium_driver = None
            
    async def _cleanup_resources(self):
        """ุชูุธูู ุงูููุงุฑุฏ"""
        if self.session:
            await self.session.close()
            
        if self.selenium_driver:
            self.selenium_driver.quit()

    # ==================== Core Implementation Methods ====================
    
    async def _detect_site_type(self, soup: BeautifulSoup) -> str:
        """ูุดู ููุน ุงููููุน ุจูุงุกู ุนูู ุงููุญุชูู ูุงูุชูููุงุช"""
        
        # ุชุญููู ุงูุนูุงูุงุช ูุงููุญุชูู
        if soup.find('meta', attrs={'name': 'generator', 'content': re.compile(r'wordpress', re.I)}):
            return "WordPress Blog/Site"
        elif soup.find('script', src=re.compile(r'wp-content|wp-includes')):
            return "WordPress Site"
        elif soup.find('div', class_='shopify-section'):
            return "Shopify E-commerce"
        elif soup.find('form', action=re.compile(r'cart|checkout')):
            return "E-commerce Site"
        elif soup.find('article') or soup.find('div', class_=re.compile(r'blog|post')):
            return "Blog/News Site"
        elif soup.find('div', class_=re.compile(r'portfolio|gallery')):
            return "Portfolio/Gallery"
        elif soup.find('form', method='post') and soup.find('input', type='email'):
            return "Business/Contact Site"
        elif soup.find('video') or soup.find('iframe', src=re.compile(r'youtube|vimeo')):
            return "Media/Entertainment"
        elif soup.find('div', class_=re.compile(r'course|lesson|education')):
            return "Educational Site"
        else:
            return "Business/Corporate Site"
    
    async def _extract_all_links(self, soup: BeautifulSoup, base_url: str) -> List[str]:
        """ุงุณุชุฎุฑุงุฌ ุฌููุน ุงูุฑูุงุจุท ูู ุงูุตูุญุฉ"""
        links = set()
        parsed_base = urlparse(base_url)
        
        # ุงุณุชุฎุฑุงุฌ ุฑูุงุจุท <a>
        for link in soup.find_all('a', href=True):
            href = link['href'].strip()
            if href:
                full_url = urljoin(base_url, href)
                if self._is_valid_internal_url(full_url, parsed_base.netloc):
                    links.add(full_url)
        
        # ุงุณุชุฎุฑุงุฌ ุฑูุงุจุท ูู JavaScript
        for script in soup.find_all('script'):
            if script.string:
                # ุงูุจุญุซ ุนู ุฑูุงุจุท ูู ุงูููุฏ
                js_links = re.findall(r'["\']([^"\']*\.(?:html|php|asp|jsp)[^"\']*)["\']', script.string)
                for js_link in js_links:
                    full_url = urljoin(base_url, js_link)
                    if self._is_valid_internal_url(full_url, parsed_base.netloc):
                        links.add(full_url)
        
        return list(links)
    
    def _is_valid_url(self, url: str) -> bool:
        """ุงูุชุญูู ูู ุตุญุฉ ุงูุฑุงุจุท"""
        try:
            parsed = urlparse(url)
            return bool(parsed.netloc) and parsed.scheme in ['http', 'https']
        except:
            return False
    
    def _is_valid_internal_url(self, url: str, base_domain: str) -> bool:
        """ุงูุชุญูู ูู ุฃู ุงูุฑุงุจุท ุฏุงุฎูู ูุตุญูุญ"""
        try:
            parsed = urlparse(url)
            if not parsed.scheme in ['http', 'https']:
                return False
            if not parsed.netloc:
                return True  # relative URL
            return parsed.netloc == base_domain or parsed.netloc.endswith('.' + base_domain)
        except:
            return False
    
    async def _analyze_robots_txt(self) -> Dict[str, Any]:
        """ุชุญููู ููู robots.txt"""
        robots_url = urljoin(self.config.target_url, '/robots.txt')
        try:
            async with self.session.get(robots_url) as response:
                if response.status == 200:
                    content = await response.text()
                    return {
                        'exists': True,
                        'content': content,
                        'disallowed_paths': re.findall(r'Disallow:\s*(.+)', content),
                        'allowed_paths': re.findall(r'Allow:\s*(.+)', content),
                        'sitemaps': re.findall(r'Sitemap:\s*(.+)', content)
                    }
        except:
            pass
        return {'exists': False}
    
    async def _discover_sitemaps(self) -> List[str]:
        """ุงูุชุดุงู ุฎุฑุงุฆุท ุงููููุน"""
        potential_sitemaps = [
            '/sitemap.xml',
            '/sitemap_index.xml',
            '/sitemap.php',
            '/sitemaps.xml',
            '/sitemap1.xml'
        ]
        
        found_sitemaps = []
        for sitemap_path in potential_sitemaps:
            sitemap_url = urljoin(self.config.target_url, sitemap_path)
            try:
                async with self.session.get(sitemap_url) as response:
                    if response.status == 200:
                        found_sitemaps.append(sitemap_url)
            except:
                continue
        
        return found_sitemaps
    
    async def _initial_technology_detection(self, soup: BeautifulSoup) -> Dict[str, Any]:
        """ุงููุดู ุงูุฃููู ุนู ุงูุชูููุงุช ุงููุณุชุฎุฏูุฉ"""
        technologies = {
            'frameworks': [],
            'cms': [],
            'analytics': [],
            'javascript_libraries': [],
            'css_frameworks': [],
            'meta_info': {}
        }
        
        # ุชุญููู ุงูุนูุงูุงุช ุงููุตููุฉ
        for meta in soup.find_all('meta'):
            if meta.get('name') == 'generator':
                technologies['meta_info']['generator'] = meta.get('content', '')
            elif meta.get('property') == 'og:type':
                technologies['meta_info']['og_type'] = meta.get('content', '')
        
        # ูุดู ุงูููุชุจุงุช ูู ุฎูุงู ุงูุณูุฑูุจุช
        for script in soup.find_all('script', src=True):
            src = script['src'].lower()
            if 'jquery' in src:
                technologies['javascript_libraries'].append('jQuery')
            elif 'react' in src:
                technologies['frameworks'].append('React')
            elif 'vue' in src:
                technologies['frameworks'].append('Vue.js')
            elif 'angular' in src:
                technologies['frameworks'].append('Angular')
            elif 'bootstrap' in src:
                technologies['css_frameworks'].append('Bootstrap')
            elif 'google-analytics' in src or 'gtag' in src:
                technologies['analytics'].append('Google Analytics')
        
        # ูุดู CSS frameworks
        for link in soup.find_all('link', rel='stylesheet'):
            if link.get('href'):
                href = link['href'].lower()
                if 'bootstrap' in href:
                    technologies['css_frameworks'].append('Bootstrap')
                elif 'foundation' in href:
                    technologies['css_frameworks'].append('Foundation')
                elif 'bulma' in href:
                    technologies['css_frameworks'].append('Bulma')
        
        return technologies
    
    async def _extract_all_pages(self):
        """ุงุณุชุฎุฑุงุฌ ุฌููุน ุตูุญุงุช ุงููููุน"""
        urls_to_process = [self.config.target_url]
        processed_urls = set()
        depth = 0
        
        while urls_to_process and depth < self.config.max_depth and len(processed_urls) < self.config.max_pages:
            current_batch = urls_to_process.copy()
            urls_to_process.clear()
            
            for url in current_batch:
                if url in processed_urls:
                    continue
                    
                self.logger.info(f"ุงุณุชุฎุฑุงุฌ ุงูุตูุญุฉ: {url}")
                
                # ุฌูุจ ูุญุชูู ุงูุตูุญุฉ
                content = await self._fetch_page_content(url, use_js=self.config.handle_javascript)
                if content:
                    # ุญูุธ ุงููุญุชูู
                    page_filename = self._url_to_filename(url) + '.html'
                    page_path = os.path.join(self.result.output_path, "01_extracted_content", page_filename)
                    
                    async with aiofiles.open(page_path, 'w', encoding='utf-8') as f:
                        await f.write(content)
                    
                    # ุงุณุชุฎุฑุงุฌ ุงูุฑูุงุจุท ุงูุฌุฏูุฏุฉ
                    soup = BeautifulSoup(content, 'html.parser')
                    new_links = await self._extract_all_links(soup, url)
                    
                    for new_link in new_links:
                        if new_link not in processed_urls and new_link not in current_batch:
                            urls_to_process.append(new_link)
                    
                    processed_urls.add(url)
                    self.result.pages_extracted += 1
                    
                await asyncio.sleep(self.config.delay_between_requests)
            
            depth += 1
    
    def _url_to_filename(self, url: str) -> str:
        """ุชุญููู URL ุฅูู ุงุณู ููู ุขูู"""
        parsed = urlparse(url)
        path = parsed.path.strip('/')
        if not path:
            path = 'index'
        
        # ุชูุธูู ุงุณู ุงูููู
        filename = re.sub(r'[^\w\-_\.]', '_', path)
        filename = re.sub(r'_+', '_', filename)
        
        # ุฅุถุงูุฉ query parameters ูู suffix
        if parsed.query:
            query_hash = hashlib.md5(parsed.query.encode()).hexdigest()[:8]
            filename += f'_{query_hash}'
        
        return filename
    
    async def _download_all_assets(self):
        """ุชุญููู ุฌููุน ุงูุฃุตูู (ุตูุฑุ CSSุ JSุ ุฅูุฎ)"""
        assets_found = set()
        
        # ุงูุจุญุซ ูู ุฌููุน ุงููููุงุช ุงููุณุชุฎุฑุฌุฉ
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    soup = BeautifulSoup(content, 'html.parser')
                    
                    # ุงุณุชุฎุฑุงุฌ ุงูุตูุฑ
                    for img in soup.find_all('img', src=True):
                        asset_url = urljoin(self.config.target_url, img['src'])
                        assets_found.add(('image', asset_url))
                    
                    # ุงุณุชุฎุฑุงุฌ CSS
                    for link in soup.find_all('link', href=True):
                        if link.get('rel') and 'stylesheet' in link['rel']:
                            asset_url = urljoin(self.config.target_url, link['href'])
                            assets_found.add(('css', asset_url))
                    
                    # ุงุณุชุฎุฑุงุฌ JavaScript
                    for script in soup.find_all('script', src=True):
                        asset_url = urljoin(self.config.target_url, script['src'])
                        assets_found.add(('js', asset_url))
        
        # ุชุญููู ุงูุฃุตูู
        for asset_type, asset_url in assets_found:
            await self._download_asset(asset_type, asset_url)
    
    async def _download_asset(self, asset_type: str, url: str):
        """ุชุญููู ุฃุตู ูุงุญุฏ"""
        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    content = await response.read()
                    
                    # ุชุญุฏูุฏ ุงููุฌูุฏ ูุงูุงูุชุฏุงุฏ
                    if asset_type == 'image':
                        folder = 'images'
                        ext = os.path.splitext(urlparse(url).path)[1] or '.jpg'
                    elif asset_type == 'css':
                        folder = 'css'
                        ext = '.css'
                    elif asset_type == 'js':
                        folder = 'js'
                        ext = '.js'
                    else:
                        folder = 'other'
                        ext = os.path.splitext(urlparse(url).path)[1] or '.bin'
                    
                    # ุฅูุดุงุก ุงููุฌูุฏ
                    asset_dir = os.path.join(self.result.output_path, "02_assets", folder)
                    os.makedirs(asset_dir, exist_ok=True)
                    
                    # ุงุณู ุงูููู
                    filename = os.path.basename(urlparse(url).path) or f'asset_{hashlib.md5(url.encode()).hexdigest()[:8]}{ext}'
                    file_path = os.path.join(asset_dir, filename)
                    
                    # ุญูุธ ุงูููู
                    async with aiofiles.open(file_path, 'wb') as f:
                        await f.write(content)
                    
                    self.result.assets_downloaded += 1
                    self.result.total_size += len(content)
                    
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุชุญููู ุงูุฃุตู {url}: {e}")
            self.error_count += 1

    # ==================== Advanced Analysis Methods ====================
    
    async def _extract_dynamic_content(self):
        """ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงูุฏููุงูููู ุจุงุณุชุฎุฏุงู JavaScript"""
        if not self.selenium_driver:
            return
            
        self.logger.info("ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงูุฏููุงูููู...")
        
        try:
            self.selenium_driver.get(self.config.target_url)
            await asyncio.sleep(5)  # ุงูุชุธุงุฑ ุชุญููู ุงููุญุชูู ุงูุฏููุงูููู
            
            # ุชูููุฐ ุณูุฑูุจุช ูุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงููุฎูู
            dynamic_content = self.selenium_driver.execute_script("""
                return {
                    hiddenElements: Array.from(document.querySelectorAll('[style*="display: none"], [hidden]')).map(el => el.outerHTML),
                    loadedScripts: Array.from(document.scripts).map(s => s.src).filter(s => s),
                    ajaxCalls: window.ajaxCalls || [],
                    dynamicData: window.dynamicData || {}
                };
            """)
            
            # ุญูุธ ุงููุญุชูู ุงูุฏููุงูููู
            dynamic_path = os.path.join(self.result.output_path, "03_source_code", "dynamic_content.json")
            async with aiofiles.open(dynamic_path, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(dynamic_content, ensure_ascii=False, indent=2))
                
        except Exception as e:
            self.logger.error(f"ุฎุทุฃ ูู ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงูุฏููุงูููู: {e}")
    
    async def _extract_hidden_content(self):
        """ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงููุฎูู ูุงููุดูุฑ"""
        self.logger.info("ุงุณุชุฎุฑุงุฌ ุงููุญุชูู ุงููุฎูู...")
        
        hidden_content = {
            'comments': [],
            'hidden_forms': [],
            'encoded_data': [],
            'obfuscated_js': []
        }
        
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    
                # ุงุณุชุฎุฑุงุฌ ุงูุชุนูููุงุช ุงููุฎููุฉ
                comments = re.findall(r'<!--(.*?)-->', content, re.DOTALL)
                hidden_content['comments'].extend(comments)
                
                # ุงูุจุญุซ ุนู ุงูุจูุงูุงุช ุงููุดูุฑุฉ
                encoded_patterns = [
                    r'data:([^;]+);base64,([A-Za-z0-9+/=]+)',
                    r'btoa\(["\']([^"\']+)["\']\)',
                    r'atob\(["\']([^"\']+)["\']\)'
                ]
                
                for pattern in encoded_patterns:
                    matches = re.findall(pattern, content)
                    hidden_content['encoded_data'].extend(matches)
        
        # ุญูุธ ุงููุญุชูู ุงููุฎูู
        hidden_path = os.path.join(self.result.output_path, "03_source_code", "hidden_content.json")
        async with aiofiles.open(hidden_path, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(hidden_content, ensure_ascii=False, indent=2))
    
    async def _comprehensive_technology_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุดุงูู ููุชูููุงุช ุงููุณุชุฎุฏูุฉ"""
        tech_analysis = {
            'server_info': {},
            'frameworks_detailed': {},
            'database_indicators': [],
            'security_features': [],
            'performance_tools': [],
            'third_party_services': []
        }
        
        # ุชุญููู headers ููุญุตูู ุนูู ูุนูููุงุช ุงูุฎุงุฏู
        try:
            async with self.session.head(self.config.target_url) as response:
                headers = dict(response.headers)
                tech_analysis['server_info'] = {
                    'server': headers.get('Server', 'Unknown'),
                    'powered_by': headers.get('X-Powered-By', 'Unknown'),
                    'framework': headers.get('X-Framework', 'Unknown'),
                    'all_headers': headers
                }
        except:
            pass
        
        # ุงุณุชุฎุฏุงู builtwith ุฅุฐุง ูุงู ูุชููุฑุงู
        if BUILTWITH_AVAILABLE:
            try:
                builtwith_result = builtwith.parse(self.config.target_url)
                tech_analysis['frameworks_detailed'] = builtwith_result
            except:
                pass
        
        return tech_analysis
    
    async def _analyze_site_structure(self) -> Dict[str, Any]:
        """ุชุญููู ุจููุฉ ุงููููุน"""
        structure = {
            'page_hierarchy': {},
            'navigation_patterns': [],
            'content_types': {},
            'url_patterns': [],
            'internal_linking': {}
        }
        
        # ุชุญููู URL patterns
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                # ุงุณุชุฎุฑุงุฌ ููุท URL ูู ุงุณู ุงูููู
                url_pattern = html_file.replace('.html', '').replace('_', '/')
                structure['url_patterns'].append(url_pattern)
        
        return structure
    
    async def _comprehensive_security_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุฃููู ุดุงูู"""
        security = {
            'ssl_analysis': {},
            'headers_security': {},
            'vulnerabilities': [],
            'authentication_methods': [],
            'data_protection': {}
        }
        
        # ุชุญููู SSL
        try:
            parsed_url = urlparse(self.config.target_url)
            if parsed_url.scheme == 'https':
                # ููุง ูููู ุฅุถุงูุฉ ุชุญููู ุดูุงุฏุฉ SSL
                security['ssl_analysis']['enabled'] = True
            else:
                security['ssl_analysis']['enabled'] = False
        except:
            pass
        
        # ุชุญููู security headers
        try:
            async with self.session.get(self.config.target_url) as response:
                headers = dict(response.headers)
                security['headers_security'] = {
                    'csp': headers.get('Content-Security-Policy'),
                    'xss_protection': headers.get('X-XSS-Protection'),
                    'frame_options': headers.get('X-Frame-Options'),
                    'content_type_options': headers.get('X-Content-Type-Options'),
                    'hsts': headers.get('Strict-Transport-Security')
                }
        except:
            pass
        
        return security
    
    async def _performance_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุงูุฃุฏุงุก"""
        performance = {
            'load_times': {},
            'resource_sizes': {},
            'optimization_opportunities': [],
            'caching_analysis': {}
        }
        
        start_time = time.time()
        try:
            async with self.session.get(self.config.target_url) as response:
                load_time = time.time() - start_time
                performance['load_times']['main_page'] = load_time
                performance['resource_sizes']['main_page'] = len(await response.read())
        except:
            pass
        
        return performance
    
    async def _extract_api_endpoints(self) -> List[Dict[str, Any]]:
        """ุงุณุชุฎุฑุงุฌ ููุงุท API ูุงูุงุณุชุฏุนุงุกุงุช"""
        api_endpoints = []
        
        # ุงูุจุญุซ ูู JavaScript files ุนู API calls
        js_dir = os.path.join(self.result.output_path, "02_assets", "js")
        if os.path.exists(js_dir):
            for js_file in os.listdir(js_dir):
                if js_file.endswith('.js'):
                    file_path = os.path.join(js_dir, js_file)
                    try:
                        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                            js_content = await f.read()
                            
                        # ุงูุจุญุซ ุนู API patterns
                        api_patterns = [
                            r'fetch\(["\']([^"\']+)["\']',
                            r'axios\.(?:get|post|put|delete)\(["\']([^"\']+)["\']',
                            r'jQuery\.(?:get|post|ajax)\(["\']([^"\']+)["\']',
                            r'api["\']:\s*["\']([^"\']+)["\']'
                        ]
                        
                        for pattern in api_patterns:
                            matches = re.findall(pattern, js_content)
                            for match in matches:
                                api_endpoints.append({
                                    'url': match,
                                    'source_file': js_file,
                                    'method': 'unknown'
                                })
                    except:
                        continue
        
        return api_endpoints
    
    async def _analyze_database_structure(self) -> Dict[str, Any]:
        """ุชุญููู ุจููุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญุชููุฉ"""
        db_structure = {
            'detected_queries': [],
            'table_references': [],
            'connection_strings': [],
            'orm_patterns': []
        }
        
        # ุงูุจุญุซ ูู ูููุงุช JavaScript ู HTML ุนู database patterns
        all_files = []
        
        # ุฅุถุงูุฉ ูููุงุช HTML
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        if os.path.exists(content_dir):
            all_files.extend([(f, 'html') for f in os.listdir(content_dir) if f.endswith('.html')])
        
        # ุฅุถุงูุฉ ูููุงุช JS
        js_dir = os.path.join(self.result.output_path, "02_assets", "js")
        if os.path.exists(js_dir):
            all_files.extend([(f, 'js') for f in os.listdir(js_dir) if f.endswith('.js')])
        
        for filename, file_type in all_files:
            if file_type == 'html':
                file_path = os.path.join(content_dir, filename)
            else:
                file_path = os.path.join(js_dir, filename)
                
            try:
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                
                # ุงูุจุญุซ ุนู SQL patterns
                sql_patterns = [
                    r'SELECT\s+.+\s+FROM\s+(\w+)',
                    r'INSERT\s+INTO\s+(\w+)',
                    r'UPDATE\s+(\w+)\s+SET',
                    r'DELETE\s+FROM\s+(\w+)'
                ]
                
                for pattern in sql_patterns:
                    matches = re.findall(pattern, content, re.IGNORECASE)
                    for match in matches:
                        if match not in db_structure['table_references']:
                            db_structure['table_references'].append(match)
            except:
                continue
        
        return db_structure
    
    async def _extract_source_code(self) -> Dict[str, Any]:
        """ุงุณุชุฎุฑุงุฌ ูุชุญููู ุงูููุฏ ุงููุตุฏุฑู"""
        source_analysis = {
            'html_structure': {},
            'css_analysis': {},
            'javascript_functions': [],
            'embedded_code': {},
            'code_complexity': {}
        }
        
        # ุชุญููู HTML
        content_dir = os.path.join(self.result.output_path, "01_extracted_content") 
        html_files = [f for f in os.listdir(content_dir) if f.endswith('.html')]
        
        source_analysis['html_structure']['total_files'] = len(html_files)
        source_analysis['html_structure']['average_size'] = 0
        
        total_size = 0
        for html_file in html_files:
            file_path = os.path.join(content_dir, html_file)
            size = os.path.getsize(file_path)
            total_size += size
        
        if html_files:
            source_analysis['html_structure']['average_size'] = total_size // len(html_files)
        
        # ุชุญููู CSS
        css_dir = os.path.join(self.result.output_path, "02_assets", "css")
        if os.path.exists(css_dir):
            css_files = [f for f in os.listdir(css_dir) if f.endswith('.css')]
            source_analysis['css_analysis']['total_files'] = len(css_files)
            
            # ุชุญููู selectors ูู CSS
            all_selectors = set()
            for css_file in css_files:
                file_path = os.path.join(css_dir, css_file)
                try:
                    async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                        css_content = await f.read()
                    
                    # ุงุณุชุฎุฑุงุฌ CSS selectors
                    selectors = re.findall(r'([.#]?[\w-]+)\s*{', css_content)
                    all_selectors.update(selectors)
                except:
                    continue
            
            source_analysis['css_analysis']['unique_selectors'] = len(all_selectors)
        
        # ุชุญููู JavaScript
        js_dir = os.path.join(self.result.output_path, "02_assets", "js")
        if os.path.exists(js_dir):
            js_files = [f for f in os.listdir(js_dir) if f.endswith('.js')]
            
            for js_file in js_files:
                file_path = os.path.join(js_dir, js_file)
                try:
                    async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                        js_content = await f.read()
                    
                    # ุงุณุชุฎุฑุงุฌ JavaScript functions
                    functions = re.findall(r'function\s+(\w+)\s*\(', js_content)
                    source_analysis['javascript_functions'].extend(functions)
                except:
                    continue
        
        return source_analysis
    
    async def _analyze_interactions(self) -> Dict[str, Any]:
        """ุชุญููู ุงูุชูุงุนูุงุช ูุงููุธุงุฆู"""
        interactions = {
            'form_interactions': [],
            'click_handlers': [],
            'ajax_interactions': [],
            'user_inputs': [],
            'dynamic_behaviors': []
        }
        
        # ุชุญููู ุงูููุงุฐุฌ
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    soup = BeautifulSoup(content, 'html.parser')
                
                # ุชุญููู ุงูููุงุฐุฌ
                for form in soup.find_all('form'):
                    form_data = {
                        'action': form.get('action', ''),
                        'method': form.get('method', 'GET'),
                        'inputs': []
                    }
                    
                    for input_tag in form.find_all(['input', 'textarea', 'select']):
                        input_data = {
                            'type': input_tag.get('type', 'text'),
                            'name': input_tag.get('name', ''),
                            'required': input_tag.has_attr('required')
                        }
                        form_data['inputs'].append(input_data)
                    
                    interactions['form_interactions'].append(form_data)
                
                # ุชุญููู click handlers
                for element in soup.find_all(attrs={'onclick': True}):
                    interactions['click_handlers'].append({
                        'element': element.name,
                        'onclick': element['onclick']
                    })
        
        return interactions

    # ==================== AI Analysis Methods ====================
    
    async def _ai_pattern_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุงูุฃููุงุท ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        patterns = {
            'design_patterns': [],
            'code_patterns': [],
            'user_flow_patterns': [],
            'content_patterns': []
        }
        
        # ุชุญููู ุฃููุงุท ุงูุชุตููู ูู CSS
        css_dir = os.path.join(self.result.output_path, "02_assets", "css")
        if os.path.exists(css_dir):
            for css_file in os.listdir(css_dir):
                if css_file.endswith('.css'):
                    file_path = os.path.join(css_dir, css_file)
                    try:
                        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                            css_content = await f.read()
                        
                        # ูุดู ุฃููุงุท CSS ุดุงุฆุนุฉ
                        if 'flexbox' in css_content or 'display: flex' in css_content:
                            patterns['design_patterns'].append('Flexbox Layout')
                        if 'grid' in css_content or 'display: grid' in css_content:
                            patterns['design_patterns'].append('CSS Grid Layout')
                        if 'media' in css_content and 'max-width' in css_content:
                            patterns['design_patterns'].append('Responsive Design')
                        if 'animation' in css_content or 'transition' in css_content:
                            patterns['design_patterns'].append('CSS Animations')
                    except:
                        continue
        
        # ุชุญููู ุฃููุงุท JavaScript
        js_dir = os.path.join(self.result.output_path, "02_assets", "js")
        if os.path.exists(js_dir):
            for js_file in os.listdir(js_dir):
                if js_file.endswith('.js'):
                    file_path = os.path.join(js_dir, js_file)
                    try:
                        async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                            js_content = await f.read()
                        
                        # ูุดู ุฃููุงุท JavaScript
                        if 'addEventListener' in js_content:
                            patterns['code_patterns'].append('Event-Driven Programming')
                        if 'Promise' in js_content or 'async' in js_content:
                            patterns['code_patterns'].append('Asynchronous Programming')
                        if 'class ' in js_content and 'constructor' in js_content:
                            patterns['code_patterns'].append('Object-Oriented Programming')
                        if 'module.exports' in js_content or 'export' in js_content:
                            patterns['code_patterns'].append('Modular Programming')
                    except:
                        continue
        
        return patterns
    
    async def _ai_content_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุงููุญุชูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        content_analysis = {
            'content_type': 'mixed',
            'language_detected': 'unknown',
            'reading_level': 'intermediate',
            'content_quality': {},
            'seo_analysis': {},
            'accessibility_score': 0
        }
        
        # ุชุญููู ุงููุญุชูู ุงููุตู
        all_text = ""
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    soup = BeautifulSoup(content, 'html.parser')
                    
                    # ุงุณุชุฎุฑุงุฌ ุงููุต ููุท
                    text = soup.get_text()
                    all_text += text + " "
        
        # ุชุญููู ุงููุต
        if all_text:
            # ูุดู ุงููุบุฉ ุงูุฃุณุงุณูุฉ
            arabic_chars = len(re.findall(r'[\u0600-\u06FF]', all_text))
            english_chars = len(re.findall(r'[a-zA-Z]', all_text))
            
            if arabic_chars > english_chars:
                content_analysis['language_detected'] = 'arabic'
            elif english_chars > arabic_chars:
                content_analysis['language_detected'] = 'english'
            else:
                content_analysis['language_detected'] = 'multilingual'
            
            # ุชุญููู ุฌูุฏุฉ ุงููุญุชูู
            word_count = len(all_text.split())
            sentence_count = len(re.findall(r'[.!?]+', all_text))
            
            content_analysis['content_quality'] = {
                'word_count': word_count,
                'sentence_count': sentence_count,
                'avg_words_per_sentence': word_count / max(sentence_count, 1),
                'estimated_reading_time': word_count / 200  # assuming 200 words per minute
            }
        
        return content_analysis
    
    async def _ai_optimization_analysis(self) -> List[str]:
        """ุชุญููู ุงูุชุญุณูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        recommendations = []
        
        # ุชุญููู ุงูุฃุฏุงุก ูุชูุฏูู ุชูุตูุงุช
        if self.result.performance_metrics:
            load_time = self.result.performance_metrics.get('load_times', {}).get('main_page', 0)
            if load_time > 3:
                recommendations.append("ุชุญุณูู ุณุฑุนุฉ ุชุญููู ุงูุตูุญุฉ - ุงูููุช ุงูุญุงูู ุฃูุซุฑ ูู 3 ุซูุงูู")
        
        # ุชุญููู ุงูุฃุตูู
        if self.result.assets_downloaded > 100:
            recommendations.append("ุชูููู ุนุฏุฏ ุงูุฃุตูู ุงููุญููุฉ - ุงูุนุฏุฏ ุงูุญุงูู ูุฑุชูุน")
        
        if self.result.total_size > 5000000:  # 5MB
            recommendations.append("ุถุบุท ุงูุฃุตูู - ุงูุญุฌู ุงูุฅุฌูุงูู ุฃูุจุฑ ูู 5MB")
        
        # ุชุญููู ุงูุฃูุงู
        if self.result.security_analysis:
            if not self.result.security_analysis.get('ssl_analysis', {}).get('enabled'):
                recommendations.append("ุชูุนูู ุดูุงุฏุฉ SSL ููุฃูุงู")
        
        return recommendations
    
    async def _ai_ux_analysis(self) -> Dict[str, Any]:
        """ุชุญููู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        ux_analysis = {
            'navigation_clarity': 'good',
            'content_accessibility': 'moderate',
            'mobile_friendliness': 'unknown',
            'user_interaction_patterns': [],
            'improvement_suggestions': []
        }
        
        # ุชุญููู ุงูุชููู
        if self.result.extracted_content.get('form_interactions'):
            forms_count = len(self.result.extracted_content['form_interactions'])
            if forms_count > 0:
                ux_analysis['user_interaction_patterns'].append(f"ูุญุชูู ุนูู {forms_count} ููุงุฐุฌ ุชูุงุนููุฉ")
        
        # ุชุญููู ุฅููุงููุฉ ุงููุตูู
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        accessibility_issues = 0
        
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    soup = BeautifulSoup(content, 'html.parser')
                
                # ูุญุต ุงูุตูุฑ ุจุฏูู alt text
                images_without_alt = soup.find_all('img', alt=False)
                accessibility_issues += len(images_without_alt)
                
                # ูุญุต ุงูุฑูุงุจุท ุจุฏูู ูุต ูุตูู
                empty_links = soup.find_all('a', string=False)
                accessibility_issues += len(empty_links)
        
        if accessibility_issues > 0:
            ux_analysis['improvement_suggestions'].append(f"ุฅุถุงูุฉ ูุตูุต ูุตููุฉ ูู {accessibility_issues} ุนูุตุฑ")
        
        return ux_analysis

    # ==================== Website Replication Methods ====================
    
    async def _create_replica_structure(self):
        """ุฅูุดุงุก ูููู ุงููููุน ุงููุทุงุจู"""
        self.logger.info("ุฅูุดุงุก ูููู ุงููููุน ุงููุทุงุจู...")
        
        replica_dir = os.path.join(self.result.output_path, "05_cloned_site")
        
        # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงูุฃุณุงุณูุฉ
        subdirs = ['assets', 'css', 'js', 'images', 'pages', 'data']
        for subdir in subdirs:
            os.makedirs(os.path.join(replica_dir, subdir), exist_ok=True)
        
        # ุฅูุดุงุก ููู index.html ุฃุณุงุณู
        index_content = """<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ูููุน ูุณุชูุณุฎ</title>
    <link rel="stylesheet" href="css/main.css">
</head>
<body>
    <div id="app">
        <h1>ูุฑุญุจุงู ุจู ูู ุงููููุน ุงููุณุชูุณุฎ</h1>
        <p>ุชู ุฅูุดุงุก ูุฐุง ุงููููุน ุชููุงุฆูุงู ุจุงุณุชุฎุฏุงู ุฃุฏุงุฉ Website Cloner Pro</p>
    </div>
    <script src="js/main.js"></script>
</body>
</html>"""
        
        async with aiofiles.open(os.path.join(replica_dir, 'index.html'), 'w', encoding='utf-8') as f:
            await f.write(index_content)
    
    async def _copy_and_modify_files(self):
        """ูุณุฎ ูุชุนุฏูู ุงููููุงุช ูููููุน ุงููุทุงุจู"""
        self.logger.info("ูุณุฎ ูุชุนุฏูู ุงููููุงุช...")
        
        replica_dir = os.path.join(self.result.output_path, "05_cloned_site")
        
        # ูุณุฎ ูููุงุช HTML
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        if os.path.exists(content_dir):
            for html_file in os.listdir(content_dir):
                if html_file.endswith('.html'):
                    src_path = os.path.join(content_dir, html_file)
                    dst_path = os.path.join(replica_dir, 'pages', html_file)
                    
                    # ูุฑุงุกุฉ ูุชุนุฏูู ุงููุญุชูู
                    async with aiofiles.open(src_path, 'r', encoding='utf-8') as f:
                        content = await f.read()
                    
                    # ุชุนุฏูู ุงููุณุงุฑุงุช ูุชููู ูุณุจูุฉ
                    modified_content = await self._modify_paths_in_html(content)
                    
                    async with aiofiles.open(dst_path, 'w', encoding='utf-8') as f:
                        await f.write(modified_content)
        
        # ูุณุฎ ุงูุฃุตูู
        assets_dir = os.path.join(self.result.output_path, "02_assets")
        if os.path.exists(assets_dir):
            await self._copy_assets_recursively(assets_dir, replica_dir)
    
    async def _modify_paths_in_html(self, html_content: str) -> str:
        """ุชุนุฏูู ุงููุณุงุฑุงุช ูู HTML ูุชููู ูุชูุงููุฉ ูุน ุงูุจููุฉ ุงูุฌุฏูุฏุฉ"""
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # ุชุนุฏูู ูุณุงุฑุงุช ุงูุตูุฑ
        for img in soup.find_all('img', src=True):
            original_src = img['src']
            if not original_src.startswith(('http://', 'https://', '//')):
                # ุชุญููู ุฅูู ูุณุงุฑ ูุณุจู
                filename = os.path.basename(original_src)
                img['src'] = f'../images/{filename}'
        
        # ุชุนุฏูู ูุณุงุฑุงุช CSS
        for link in soup.find_all('link', href=True):
            if link.get('rel') and 'stylesheet' in link['rel']:
                original_href = link['href']
                if not original_href.startswith(('http://', 'https://', '//')):
                    filename = os.path.basename(original_href)
                    link['href'] = f'../css/{filename}'
        
        # ุชุนุฏูู ูุณุงุฑุงุช JavaScript
        for script in soup.find_all('script', src=True):
            original_src = script['src']
            if not original_src.startswith(('http://', 'https://', '//')):
                filename = os.path.basename(original_src)
                script['src'] = f'../js/{filename}'
        
        return str(soup)
    
    async def _copy_assets_recursively(self, src_dir: str, dst_dir: str):
        """ูุณุฎ ุงูุฃุตูู ุจุดูู ุชูุฑุงุฑู"""
        for root, dirs, files in os.walk(src_dir):
            for file in files:
                src_file = os.path.join(root, file)
                
                # ุชุญุฏูุฏ ุงููุฌูุฏ ุงููุฌูุฉ ุจูุงุกู ุนูู ููุน ุงูููู
                if file.endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg')):
                    dst_subdir = 'images'
                elif file.endswith('.css'):
                    dst_subdir = 'css'
                elif file.endswith('.js'):
                    dst_subdir = 'js'
                else:
                    dst_subdir = 'assets'
                
                dst_file = os.path.join(dst_dir, dst_subdir, file)
                
                try:
                    shutil.copy2(src_file, dst_file)
                except Exception as e:
                    self.logger.warning(f"ูุดู ูู ูุณุฎ {src_file}: {e}")
    
    async def _create_routing_system(self):
        """ุฅูุดุงุก ูุธุงู ุงูุชูุฌูู ูููููุน ุงููุทุงุจู"""
        self.logger.info("ุฅูุดุงุก ูุธุงู ุงูุชูุฌูู...")
        
        replica_dir = os.path.join(self.result.output_path, "05_cloned_site")
        
        # ุฅูุดุงุก ููู .htaccess ููุชูุฌูู
        htaccess_content = """RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?route=$1 [QSA,L]

# ุชูุนูู ุงูุถุบุท
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# ุชูุนูู ุงูุชุฎุฒูู ุงููุคูุช
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/jpg "access plus 1 month"
    ExpiresByType image/jpeg "access plus 1 month"
    ExpiresByType image/gif "access plus 1 month"
    ExpiresByType image/png "access plus 1 month"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/pdf "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType application/x-javascript "access plus 1 month"
    ExpiresByType application/x-shockwave-flash "access plus 1 month"
    ExpiresByType image/x-icon "access plus 1 year"
    ExpiresDefault "access plus 2 days"
</IfModule>"""
        
        async with aiofiles.open(os.path.join(replica_dir, '.htaccess'), 'w', encoding='utf-8') as f:
            await f.write(htaccess_content)
        
        # ุฅูุดุงุก ููู router.php ุฃุณุงุณู
        php_router = """<?php
// Simple PHP Router for Cloned Website
$route = $_GET['route'] ?? '';

// ุชูุธูู ุงููุณุงุฑ
$route = trim($route, '/');
if (empty($route)) {
    $route = 'index';
}

// ุชุญุฏูุฏ ุงูููู ุงููุทููุจ
$page_file = 'pages/' . $route . '.html';

if (file_exists($page_file)) {
    // ุนุฑุถ ุงูุตูุญุฉ ุงููุทููุจุฉ
    include $page_file;
} else {
    // ุนุฑุถ ุตูุญุฉ 404
    http_response_code(404);
    echo '<h1>404 - ุงูุตูุญุฉ ุบูุฑ ููุฌูุฏุฉ</h1>';
    echo '<p>ุงูุตูุญุฉ ุงููุทููุจุฉ ุบูุฑ ูุชููุฑุฉ.</p>';
    echo '<a href="/">ุงูุนูุฏุฉ ููุตูุญุฉ ุงูุฑุฆูุณูุฉ</a>';
}
?>"""
        
        async with aiofiles.open(os.path.join(replica_dir, 'router.php'), 'w', encoding='utf-8') as f:
            await f.write(php_router)
    
    async def _setup_local_database(self):
        """ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุจูุงูุงุช ูุญููุฉ ูููููุน ุงููุทุงุจู"""
        self.logger.info("ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ...")
        
        db_dir = os.path.join(self.result.output_path, "07_databases")
        db_file = os.path.join(db_dir, "cloned_site.db")
        
        # ุฅูุดุงุก ูุงุนุฏุฉ ุจูุงูุงุช SQLite
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()
        
        # ุฅูุดุงุก ุฌุฏุงูู ุฃุณุงุณูุฉ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                url TEXT UNIQUE,
                title TEXT,
                content TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS assets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                type TEXT,
                url TEXT,
                local_path TEXT,
                size INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analysis_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                analysis_type TEXT,
                results TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ุญูุธ ุจูุงูุงุช ุงูุตูุญุงุช ุงููุณุชุฎุฑุฌุฉ
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        if os.path.exists(content_dir):
            for html_file in os.listdir(content_dir):
                if html_file.endswith('.html'):
                    file_path = os.path.join(content_dir, html_file)
                    
                    async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                        content = await f.read()
                    
                    soup = BeautifulSoup(content, 'html.parser')
                    title = soup.find('title')
                    title_text = title.get_text() if title else html_file
                    
                    cursor.execute('''
                        INSERT OR REPLACE INTO pages (url, title, content)
                        VALUES (?, ?, ?)
                    ''', (html_file, title_text, content))
        
        conn.commit()
        conn.close()
        
        # ุฅูุดุงุก ููู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        db_config = f"""<?php
// Database Configuration for Cloned Website
$database_config = [
    'type' => 'sqlite',
    'path' => 'databases/cloned_site.db',
    'options' => [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ]
];

// Database Connection Function
function getDatabase() {{
    global $database_config;
    try {{
        $pdo = new PDO(
            'sqlite:' . $database_config['path'],
            null,
            null,
            $database_config['options']
        );
        return $pdo;
    }} catch (PDOException $e) {{
        error_log('Database connection failed: ' . $e->getMessage());
        return null;
    }}
}}
?>"""
        
        replica_dir = os.path.join(self.result.output_path, "05_cloned_site")
        async with aiofiles.open(os.path.join(replica_dir, 'database.php'), 'w', encoding='utf-8') as f:
            await f.write(db_config)
    
    # ==================== Quality Assurance Methods ====================
    
    async def _test_all_links(self) -> List[str]:
        """ุงุฎุชุจุงุฑ ุฌููุน ุงูุฑูุงุจุท ููุชุฃูุฏ ูู ุนูููุง"""
        self.logger.info("ุงุฎุชุจุงุฑ ุงูุฑูุงุจุท...")
        
        broken_links = []
        content_dir = os.path.join(self.result.output_path, "01_extracted_content")
        
        for html_file in os.listdir(content_dir):
            if html_file.endswith('.html'):
                file_path = os.path.join(content_dir, html_file)
                
                async with aiofiles.open(file_path, 'r', encoding='utf-8') as f:
                    content = await f.read()
                
                soup = BeautifulSoup(content, 'html.parser')
                
                # ุงุฎุชุจุงุฑ ุฑูุงุจุท ุงูุตูุฑ
                for img in soup.find_all('img', src=True):
                    img_url = urljoin(self.config.target_url, img['src'])
                    if not await self._test_url(img_url):
                        broken_links.append(f"ุตูุฑุฉ ููุณูุฑุฉ: {img_url}")
                
                # ุงุฎุชุจุงุฑ ุงูุฑูุงุจุท ุงููุตูุฉ
                for link in soup.find_all('a', href=True):
                    link_url = urljoin(self.config.target_url, link['href'])
                    if link_url.startswith(('http://', 'https://')) and not await self._test_url(link_url):
                        broken_links.append(f"ุฑุงุจุท ููุณูุฑ: {link_url}")
        
        return broken_links
    
    async def _test_url(self, url: str) -> bool:
        """ุงุฎุชุจุงุฑ ุฑุงุจุท ูุงุญุฏ"""
        try:
            async with self.session.head(url) as response:
                return response.status < 400
        except:
            return False
    
    async def _verify_assets(self) -> List[str]:
        """ุงูุชุญูู ูู ุณูุงูุฉ ุงูุฃุตูู ุงููุญููุฉ"""
        missing_assets = []
        assets_dir = os.path.join(self.result.output_path, "02_assets")
        
        if os.path.exists(assets_dir):
            for root, dirs, files in os.walk(assets_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    
                    # ุงูุชุญูู ูู ุญุฌู ุงูููู
                    if os.path.getsize(file_path) == 0:
                        missing_assets.append(f"ููู ูุงุฑุบ: {file}")
                    
                    # ุงูุชุญูู ูู ููุน ุงูููู
                    if file.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                        try:
                            # ูููู ุฅุถุงูุฉ ูุญุต ุฃูุซุฑ ุชูุตููุงู ููุตูุฑ ููุง
                            pass
                        except:
                            missing_assets.append(f"ุตูุฑุฉ ุชุงููุฉ: {file}")
        
        return missing_assets
    
    async def _compare_performance(self) -> Dict[str, Any]:
        """ููุงุฑูุฉ ุฃุฏุงุก ุงููููุน ุงูุฃุตูู ูุงููุณุฎุฉ"""
        comparison = {
            'original_load_time': 0,
            'replica_load_time': 0,
            'size_difference': 0,
            'functionality_preservation': 'unknown'
        }
        
        # ููุงุณ ุณุฑุนุฉ ุงููููุน ุงูุฃุตูู
        start_time = time.time()
        try:
            async with self.session.get(self.config.target_url) as response:
                if response.status == 200:
                    comparison['original_load_time'] = time.time() - start_time
        except:
            pass
        
        return comparison
    
    async def _calculate_quality_score(self) -> Dict[str, Any]:
        """ุญุณุงุจ ููุงุท ุงูุฌูุฏุฉ ุงูุฅุฌูุงููุฉ"""
        quality_score = {
            'overall_score': 0,
            'completeness': 0,
            'accuracy': 0,
            'performance': 0,
            'functionality': 0
        }
        
        # ุญุณุงุจ ุฏุฑุฌุฉ ุงูุงูุชูุงู
        expected_pages = 10  # ุงูุชุฑุงุถู
        actual_pages = self.result.pages_extracted
        quality_score['completeness'] = min(100, (actual_pages / expected_pages) * 100)
        
        # ุญุณุงุจ ุฏุฑุฌุฉ ุงูุฏูุฉ
        total_errors = len(self.result.error_log)
        if total_errors == 0:
            quality_score['accuracy'] = 100
        else:
            quality_score['accuracy'] = max(0, 100 - (total_errors * 10))
        
        # ุญุณุงุจ ุฏุฑุฌุฉ ุงูุฃุฏุงุก
        if self.result.total_size > 0:
            size_efficiency = min(100, (self.result.assets_downloaded / max(self.result.total_size / 1000000, 1)) * 10)
            quality_score['performance'] = size_efficiency
        
        # ุญุณุงุจ ุงูููุงุท ุงูุฅุฌูุงููุฉ
        quality_score['overall_score'] = (
            quality_score['completeness'] * 0.3 +
            quality_score['accuracy'] * 0.3 +
            quality_score['performance'] * 0.2 +
            quality_score['functionality'] * 0.2
        )
        


async def main():
    """ูุธููุฉ ุงุฎุชุจุงุฑ ุงูุฃุฏุงุฉ"""
    config = CloningConfig(
        target_url="https://example.com",
        max_depth=3,
        max_pages=50,
        extract_all_content=True,
        analyze_with_ai=True,
        generate_reports=True
    )
    
    cloner = WebsiteClonerPro(config)
    result = await cloner.clone_website_complete("https://example.com")
    
    if result.success:
        print(f"โ ุชู ุงูุงุณุชูุณุงุฎ ุจูุฌุงุญ ูู: {result.output_path}")
        print(f"๐ ุงูุตูุญุงุช ุงููุณุชุฎุฑุฌุฉ: {result.pages_extracted}")
        print(f"๐ ุงูุฃุตูู ุงููุญููุฉ: {result.assets_downloaded}")
        print(f"โฑ๏ธ ุงููุฏุฉ: {result.duration:.2f} ุซุงููุฉ")
    else:
        print("โ ูุดู ูู ุนูููุฉ ุงูุงุณุชูุณุงุฎ")
        for error in result.error_log:
            print(f"  - {error}")

if __name__ == "__main__":
    asyncio.run(main())